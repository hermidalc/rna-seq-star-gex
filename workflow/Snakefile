import re
from glob import glob
from os import getcwd, mkdir, remove, walk
from os.path import dirname, exists, isdir, join, splitext
from pathlib import Path
from shutil import rmtree

import pandas as pd
from snakemake.utils import validate


configfile: "config/config.yaml"


RESOURCES_DIR = "resources"
RESULTS_DIR = "results"
LOG_DIR = "logs"

STUDY_NAME = config["study"]["name"]

samples_df = (
    pd.read_csv(config["study"]["samples"], sep="\t", dtype={"sample_name": str})
    .set_index("sample_name", drop=False, verify_integrity=True)
    .sort_index()
)
validate(samples_df, schema="schemas/samples.schema.yaml")

units_df = pd.read_csv(
    config["study"]["units"], sep="\t", dtype={"sample_name": str, "unit_name": str}
)
if units_df["unit_name"].isna().all():
    units_df = units_df.set_index(
        "sample_name", drop=False, verify_integrity=True
    ).sort_index()
    FASTQ_PREFIX_WILDCARD_STR = "{sample}"
    SAMPLES = units_df["sample_name"].tolist()
    EXPAND_PARAMS = {"sample": SAMPLES}
else:
    units_df.set_index(
        ["sample_name", "unit_name"], drop=False, verify_integrity=True
    ).sort_index()
    FASTQ_PREFIX_WILDCARD_STR = "{sample}_{unit}"
    SAMPLES = units_df["sample_name"].tolist()
    UNITS = units_df["unit_name"].tolist()
    EXPAND_PARAMS = {"sample": SAMPLES, "unit": UNITS}

validate(units_df, schema="schemas/units.schema.yaml")

EXPAND_PARAMS["sub_dir"] = [Path(dirname(fq)).stem for fq in units_df["fq1"]]

GENCODE_RESOURCES_DIR = join(RESOURCES_DIR, "gencode")

GENCODE_PROTOCOL = config["gencode"]["protocol"]
GENCODE_SPECIES = config["gencode"]["species"]
GENCODE_RELEASE = config["gencode"]["release"]
GENCODE_BUILD = config["gencode"]["build"]
GENCODE_REGIONS = config["gencode"]["regions"]
GENCODE_ANNOT_FMT = config["gencode"]["annot"]["fmt"]

GENCODE_GENOME_NAME = f"gencode_v{GENCODE_RELEASE}_{GENCODE_BUILD}"

GENCODE_GENOME_SEQ_FILE = join(GENCODE_RESOURCES_DIR, f"{GENCODE_GENOME_NAME}.fa")
GENCODE_GENOME_ANNOT_FILE = join(
    GENCODE_RESOURCES_DIR, f"{GENCODE_GENOME_NAME}.{GENCODE_ANNOT_FMT.lower()}"
)

GENCODE_GENOME_SEQ_WRAPPER = join(
    config["wrapper"]["base_url"], "bio/reference/gencode/sequence"
)
GENCODE_GENOME_ANNOT_WRAPPER = join(
    config["wrapper"]["base_url"], "bio/reference/gencode/annotation"
)

RSEQC_RESOURCES_DIR = join(RESOURCES_DIR, "rseqc")
RSEQC_LOG_DIR = join(LOG_DIR, "rseqc")

RSEQC_GENOME_ANNOT_FILE = join(RSEQC_RESOURCES_DIR, f"{GENCODE_GENOME_NAME}.bed")
RSEQC_GENOME_ANNOT_DB = join(RSEQC_RESOURCES_DIR, f"{GENCODE_GENOME_NAME}.db")

RSEQC_ANNOT_LOG = join(RSEQC_LOG_DIR, "gtf2bed.log")

RSEQC_ANNOT_WRAPPER = join(config["wrapper"]["base_url"], "bio/gffutils/gtf2bed")

FASTQ_PARENT_DIR = config["fastq"]["parent_dir"]
FASTQ_PAIRS = config["fastq"]["pairs"]
FASTQ_PLATFORM = config["fastq"]["platform"]

TRIMMED_RESULTS_DIR = join(RESULTS_DIR, "fastp", "{sub_dir}", FASTQ_PREFIX_WILDCARD_STR)
FASTP_LOG_DIR = join(LOG_DIR, "fastq", "{sub_dir}")

FASTQ1_FILE = join(
    FASTQ_PARENT_DIR, f"{FASTQ_PREFIX_WILDCARD_STR}_{FASTQ_PAIRS[0]}.fastq.gz"
)
FASTQ2_FILE = join(
    FASTQ_PARENT_DIR, f"{FASTQ_PREFIX_WILDCARD_STR}_{FASTQ_PAIRS[1]}.fastq.gz"
)
TRIMMED_FASTQ1_FILE = join(
    TRIMMED_RESULTS_DIR,
    f"{FASTQ_PREFIX_WILDCARD_STR}_{FASTQ_PAIRS[0]}.fastq.gz",
)
TRIMMED_FASTQ2_FILE = join(
    TRIMMED_RESULTS_DIR,
    f"{FASTQ_PREFIX_WILDCARD_STR}_{FASTQ_PAIRS[1]}.fastq.gz",
)

TRIMMED_UNPAIR1_FILE = join(
    TRIMMED_RESULTS_DIR, f"{FASTQ_PREFIX_WILDCARD_STR}_U1.fastq.gz"
)
TRIMMED_UNPAIR2_FILE = join(
    TRIMMED_RESULTS_DIR, f"{FASTQ_PREFIX_WILDCARD_STR}_U2.fastq.gz"
)
FAILED_READS_FILE = join(
    TRIMMED_RESULTS_DIR, f"{FASTQ_PREFIX_WILDCARD_STR}.failed.fastq.gz"
)
FASTP_HTML_REPORT_FILE = join(
    TRIMMED_RESULTS_DIR, f"{FASTQ_PREFIX_WILDCARD_STR}_report.html"
)
FASTP_JSON_REPORT_FILE = join(
    TRIMMED_RESULTS_DIR, f"{FASTQ_PREFIX_WILDCARD_STR}_report.json"
)

FASTP_LOG = join(FASTP_LOG_DIR, f"{FASTQ_PREFIX_WILDCARD_STR}.log")
FASTP_WRAPPER = join(config["wrapper"]["base_url"], "bio/fastp")

READ_LENGTH_RESULTS_DIR = join(RESULTS_DIR, "read_length", "{sub_dir}")
READ_LENGTH_LOG_DIR = join(LOG_DIR, "read_length", "{sub_dir}")

READ_LENGTH_HISTOGRAM_FILE = join(
    READ_LENGTH_RESULTS_DIR, f"{FASTQ_PREFIX_WILDCARD_STR}_histogram.tsv"
)
READ_LENGTH_FILE = join(
    READ_LENGTH_RESULTS_DIR, f"{FASTQ_PREFIX_WILDCARD_STR}_length.txt"
)

READ_LENGTH_HISTOGRAM_LOG = join(
    READ_LENGTH_LOG_DIR, f"{FASTQ_PREFIX_WILDCARD_STR}_histogram.log"
)
READ_LENGTH_LOG = join(READ_LENGTH_LOG_DIR, f"{FASTQ_PREFIX_WILDCARD_STR}_length.log")

READ_LENGTH_WRAPPER = join(config["wrapper"]["base_url"], "bio/bbmap/readlength")

STAR_RESOURCES_DIR = join(RESOURCES_DIR, "star")
STAR_RESULTS_DIR = join(RESULTS_DIR, "star", "{sub_dir}")
STAR_LOG_DIR = join(LOG_DIR, "star", "{sub_dir}")
STAR_GENOME_DIR = join(STAR_RESOURCES_DIR, GENCODE_GENOME_NAME)
STAR_OUTPUT_DIR = join(STAR_RESULTS_DIR, FASTQ_PREFIX_WILDCARD_STR)
STAR_PASS1_OUTPUT_DIR = join(STAR_OUTPUT_DIR, "_STARpass1")
STAR_PASS2_OUTPUT_DIR = join(STAR_OUTPUT_DIR, "_STARpass2")
STAR_OUTPUT_LOG_DIR = join(STAR_LOG_DIR, FASTQ_PREFIX_WILDCARD_STR)

STAR_PASS1_SJ_FILE = join(STAR_PASS1_OUTPUT_DIR, "SJ.out.tab")
STAR_PASS1_SJ_FILTERED_FILE = join(STAR_PASS1_OUTPUT_DIR, "SJ.filtered.out.tab")

STAR_BAM_FILE = join(
    STAR_PASS2_OUTPUT_DIR,
    "Aligned.sortedByCoord.out.bam"
    if config["star"]["align"]["sort_bam"]
    else "Aligned.out.bam",
)
STAR_READ_COUNT_FILE = join(STAR_PASS2_OUTPUT_DIR, "ReadsPerGene.out.tab")

SAM_ATTR_RG_LINE = (
    f"ID:{FASTQ_PREFIX_WILDCARD_STR} PL:{FASTQ_PLATFORM} "
    f"SM:{FASTQ_PREFIX_WILDCARD_STR} LB:RNA"
)
STAR_BAM_SORT = (
    "SortedByCoordinate" if config["star"]["align"]["sort_bam"] else "Unsorted"
)

STAR_LOG_DIR = join(LOG_DIR, "star")
STAR_GENOME_LOG = join(STAR_LOG_DIR, GENCODE_GENOME_NAME, "genome_index.log")
STAR_PASS1_SJ_FILTERED_LOG = join(STAR_OUTPUT_LOG_DIR, "filter_pass1_sj.log")
STAR_ALIGN_PASS1_LOG = join(STAR_OUTPUT_LOG_DIR, "align_pass1.log")
STAR_ALIGN_PASS2_LOG = join(STAR_OUTPUT_LOG_DIR, "align_pass2.log")

STAR_GENOME_WRAPPER = join(config["wrapper"]["base_url"], "bio/star/index")
STAR_ALIGN_WRAPPER = join(config["wrapper"]["base_url"], "bio/star/align")

RSEQC_RESULTS_DIR = join(RESULTS_DIR, "rseqc", "{sub_dir}")
RSEQC_LOG_DIR = join(LOG_DIR, "rseqc", "{sub_dir}")

RSEQC_INFER_EXPERIMENT_FILE = join(
    RSEQC_RESULTS_DIR, f"{FASTQ_PREFIX_WILDCARD_STR}_infer_experiment.txt"
)
RSEQC_INFER_EXPERIMENT_LOG = join(
    RSEQC_LOG_DIR, f"{FASTQ_PREFIX_WILDCARD_STR}_infer_experiment.log"
)

RSEQC_INFER_EXPERIMENT_WRAPPER = join(
    config["wrapper"]["base_url"], "bio/rseqc/infer_experiment"
)

RSEQC_STRAND_INFO_FILE = join(
    RSEQC_RESULTS_DIR, f"{FASTQ_PREFIX_WILDCARD_STR}_strand_info.txt"
)

COUNT_MATRIX_RESULTS_DIR = join(RESULTS_DIR, "count_matrix")
COUNT_MATRIX_LOG_DIR = join(LOG_DIR, "count_matrix")

COUNT_MATRIX_FILE = join(COUNT_MATRIX_RESULTS_DIR, f"{STUDY_NAME}.tsv")
COUNT_MATRIX_LOG = join(COUNT_MATRIX_LOG_DIR, f"{STUDY_NAME}.log")

COUNT_MATRIX_WRAPPER = join(config["wrapper"]["base_url"], "bio/star/count_matrix")


include: "rules/common.smk"
include: "rules/genome.smk"
include: "rules/trim.smk"
include: "rules/read_length.smk"
include: "rules/align.smk"
include: "rules/strand_info.smk"
include: "rules/count_matrix.smk"


if not exists(LOG_DIR):
    mkdir(LOG_DIR, mode=0o755)


wildcard_constraints:
    **{w: "|".join(set([re.escape(v) for v in l])) for w, l in EXPAND_PARAMS.items()},


rule all:
    input:
        GENCODE_GENOME_SEQ_FILE,
        GENCODE_GENOME_ANNOT_FILE,
        RSEQC_GENOME_ANNOT_FILE,
        STAR_GENOME_DIR,
        expand(TRIMMED_FASTQ1_FILE, zip, **EXPAND_PARAMS),
        expand(TRIMMED_FASTQ2_FILE, zip, **EXPAND_PARAMS),
        expand(READ_LENGTH_HISTOGRAM_FILE, zip, **EXPAND_PARAMS),
        expand(READ_LENGTH_FILE, zip, **EXPAND_PARAMS),
        expand(STAR_PASS1_SJ_FILE, zip, **EXPAND_PARAMS),
        expand(STAR_PASS1_SJ_FILTERED_FILE, zip, **EXPAND_PARAMS),
        expand(STAR_BAM_FILE, zip, **EXPAND_PARAMS),
        expand(STAR_READ_COUNT_FILE, zip, **EXPAND_PARAMS),
        expand(RSEQC_INFER_EXPERIMENT_FILE, zip, **EXPAND_PARAMS),
        expand(RSEQC_STRAND_INFO_FILE, zip, **EXPAND_PARAMS),
        COUNT_MATRIX_FILE,


def clean(*dirs):
    for clean_dir in dirs:
        for file in glob(join(clean_dir, "*")):
            if isdir(file):
                rmtree(file)
            else:
                remove(file)
        for dirpath, dirnames, filenames in sorted(walk(getcwd())):
            for name in dirnames:
                if name == "__pycache__":
                    rmtree(join(dirpath, name))


rule clean:
    run:
        clean(RESULTS_DIR, LOG_DIR)


rule clean_all:
    run:
        clean(RESOURCES_DIR, RESULTS_DIR, LOG_DIR)
