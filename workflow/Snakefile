import re
from os import getcwd, walk
from os.path import dirname, exists, join
from tempfile import gettempdir
from shutil import rmtree

import pandas as pd
from snakemake.utils import validate

CONFIG_DIR = "config"
RESOURCES_DIR = "resources"
RESULTS_DIR = "results"
LOG_DIR = "logs"
RULES_DIR = "rules"
REPORT_DIR = "report"


configfile: join(CONFIG_DIR, "config.yaml")


SAMPLE_CONFIG_FILE = config["samples"]
UNIT_CONFIG_FILE = config["units"]

TEMP_DIR = config["tmp_dir"] if config["tmp_dir"] else gettempdir()

SAMPLE_DF = pd.read_csv(
    SAMPLE_CONFIG_FILE, sep="\t", dtype={"sample_name": str, "sample_label": str}
).set_index("sample_name", drop=False, verify_integrity=True)
validate(SAMPLE_DF, schema="schemas/samples.schema.yaml")

UNIT_DF = pd.read_csv(
    UNIT_CONFIG_FILE, sep="\t", dtype={"sample_name": str, "unit_name": str}
)
validate(UNIT_DF, schema="schemas/units.schema.yaml")

if UNIT_DF["unit_name"].isna().all():
    UNIT_DF.set_index("sample_name", inplace=True, drop=False, verify_integrity=True)
    RUN_ID_WILDCARD_STR = "{sample}"
    SAMPLES = UNIT_DF["sample_name"].tolist()
    EXPAND_PARAMS = {"sample": SAMPLES}
else:
    UNIT_DF.set_index(
        ["sample_name", "unit_name"], inplace=True, drop=False, verify_integrity=True
    )
    RUN_ID_WILDCARD_STR = "{sample}_{unit}"
    SAMPLES = UNIT_DF["sample_name"].tolist()
    UNITS = UNIT_DF["unit_name"].tolist()
    EXPAND_PARAMS = {"sample": SAMPLES, "unit": UNITS}

SAMPLE_DF = SAMPLE_DF.loc[SAMPLES]

SAMPLE_LABELS = [
    n if pd.isna(l) else l
    for n, l in zip(SAMPLE_DF["sample_name"], SAMPLE_DF["sample_label"])
]

EXPAND_PARAMS["sub_dir"] = [dirname(fq) for fq in UNIT_DF["fq1"]]

EXPAND_PARAMS["study"] = config["studies"]
EXPAND_PARAMS["experiment"] = [e.lower() for e in config["experiments"]]

GENCODE_RESOURCES_DIR = join(RESOURCES_DIR, "gencode")
STAR_RESOURCES_DIR = join(RESOURCES_DIR, "star")
RSEQC_RESOURCES_DIR = join(RESOURCES_DIR, "rseqc")

GENCODE_PROTOCOL = config["gencode"]["protocol"]
GENCODE_SPECIES = config["gencode"]["species"]
GENCODE_RELEASE = config["gencode"]["release"]
GENCODE_BUILD = config["gencode"]["build"]
GENCODE_REGIONS = config["gencode"]["regions"]
GENCODE_ANNOT_FMT = config["gencode"]["annot"]["fmt"]

FASTQ_DATA_DIR = config["fastq"]["data_dir"]
FASTQ_PAIRS = config["fastq"]["pairs"]
FASTQ_EXT = config["fastq"]["ext"]
FASTQ_PLATFORM = config["fastq"]["platform"]

DIFFEXP_METHODS = config["diffexp"]["methods"]
DIFFEXP_QC_TYPES = config["diffexp"]["qc"]["types"]

GENCODE_GENOME_NAME = f"gencode_{GENCODE_RELEASE}_{GENCODE_BUILD}"
GENCODE_GENOME_SEQ_FILE = join(GENCODE_RESOURCES_DIR, f"{GENCODE_GENOME_NAME}.fa")
GENCODE_GENOME_ANNOT_FILE = join(
    GENCODE_RESOURCES_DIR, f"{GENCODE_GENOME_NAME}.{GENCODE_ANNOT_FMT.lower()}"
)
GENCODE_GENE_ANNOT_FILE = join(
    GENCODE_RESOURCES_DIR, f"{GENCODE_GENOME_NAME}_gene_annot.tsv"
)

RSEQC_GENOME_ANNOT_FILE = join(RSEQC_RESOURCES_DIR, f"{GENCODE_GENOME_NAME}.bed")
RSEQC_GENOME_ANNOT_DB = join(RSEQC_RESOURCES_DIR, f"{GENCODE_GENOME_NAME}.db")

TRIMMED_RESULTS_DIR = join(RESULTS_DIR, "fastp", "{sub_dir}")

FASTQ1_FILE = join(
    FASTQ_DATA_DIR, f"{RUN_ID_WILDCARD_STR}_{FASTQ_PAIRS[0]}.{FASTQ_EXT}"
)
FASTQ2_FILE = join(
    FASTQ_DATA_DIR, f"{RUN_ID_WILDCARD_STR}_{FASTQ_PAIRS[1]}.{FASTQ_EXT}"
)
TRIMMED_FASTQ1_FILE = join(
    TRIMMED_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}_{FASTQ_PAIRS[0]}.{FASTQ_EXT}"
)
TRIMMED_FASTQ2_FILE = join(
    TRIMMED_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}_{FASTQ_PAIRS[1]}.{FASTQ_EXT}"
)

TRIMMED_UNPAIR1_FILE = join(
    TRIMMED_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}_unpaired1.{FASTQ_EXT}"
)
TRIMMED_UNPAIR2_FILE = join(
    TRIMMED_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}_unpaired2.{FASTQ_EXT}"
)
FAILED_READS_FILE = join(
    TRIMMED_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}.failed.{FASTQ_EXT}"
)
FASTP_HTML_REPORT_FILE = join(TRIMMED_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}_report.html")
FASTP_JSON_REPORT_FILE = join(TRIMMED_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}_report.json")

READ_LENGTH_RESULTS_DIR = join(RESULTS_DIR, "read_length", "{sub_dir}")
READ_LENGTH_HISTOGRAM_FILE = join(
    READ_LENGTH_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}_histogram.tsv"
)
READ_LENGTH_FILE = join(READ_LENGTH_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}_length.txt")

STAR_INDEX_DIR = join(STAR_RESOURCES_DIR, GENCODE_GENOME_NAME)
STAR_RESULTS_DIR = join(RESULTS_DIR, "star")
STAR_ALIGN_DIR = join(STAR_RESULTS_DIR, "{sub_dir}", RUN_ID_WILDCARD_STR)
STAR_ALIGN_PASS1_DIR = join(STAR_ALIGN_DIR, "_STARpass1")
STAR_ALIGN_PASS2_DIR = join(STAR_ALIGN_DIR, "_STARpass2")
STAR_ALIGN_PASS1_SJ_FILE = join(STAR_ALIGN_PASS1_DIR, "SJ.out.tab")
STAR_ALIGN_PASS1_SJ_FILTERED_FILE = join(STAR_ALIGN_PASS1_DIR, "SJ.filtered.out.tab")
STAR_BAM_FILE = join(
    STAR_ALIGN_PASS2_DIR,
    "Aligned.sortedByCoord.out.bam"
    if config["star"]["align"]["sort_bam"]
    else "Aligned.out.bam",
)
STAR_READ_COUNT_FILE = join(STAR_ALIGN_PASS2_DIR, "ReadsPerGene.out.tab")
STAR_SAM_ATTR_RG_LINE = (
    f"ID:{RUN_ID_WILDCARD_STR} PL:{FASTQ_PLATFORM} " f"SM:{RUN_ID_WILDCARD_STR} LB:RNA"
)
STAR_BAM_SORT = (
    "SortedByCoordinate" if config["star"]["align"]["sort_bam"] else "Unsorted"
)

RSEQC_RESULTS_DIR = join(RESULTS_DIR, "rseqc", "{sub_dir}")
RSEQC_INFER_EXPERIMENT_FILE = join(
    RSEQC_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}_infer_experiment.txt"
)
RSEQC_STRAND_INFO_FILE = join(
    RSEQC_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}_strand_info.txt"
)

DATA_MATRIX_RESULTS_DIR = join(RESULTS_DIR, "data_matrix", "{study}")
COUNT_MATRIX_FILE = join(DATA_MATRIX_RESULTS_DIR, "{study}_count_matrix.tsv")
COUNT_ESET_FILE = join(DATA_MATRIX_RESULTS_DIR, "{study}_count_eset.rds")

EXPAND_PARAMS["de_qc_meth"] = ["counts"] + DIFFEXP_METHODS
EXPAND_PARAMS["de_qc_type"] = DIFFEXP_QC_TYPES
EXPAND_PARAMS["de_meth"] = DIFFEXP_METHODS

DIFFEXP_RESULTS_DIR = join(RESULTS_DIR, "diffexp", "{study}")
NORM_ESET_FILE = join(DIFFEXP_RESULTS_DIR, "{study}_{experiment}_{de_meth}_eset.rds")
DIFFEXP_QC_PLOT_FILE = join(
    DIFFEXP_RESULTS_DIR, "{study}_{experiment}_{de_qc_meth}_{de_qc_type}.png"
)
DIFFEXP_RESULTS_TABLE_FILE = join(
    DIFFEXP_RESULTS_DIR, "{study}_{experiment}_{de_meth}_results.tsv"
)
DIFFEXP_VOLCANO_PLOT_FILE = join(
    DIFFEXP_RESULTS_DIR, "{study}_{experiment}_{de_meth}_volcano.png"
)
DIFFEXP_HEATMAP_PLOT_FILE = join(
    DIFFEXP_RESULTS_DIR, "{study}_{experiment}_{de_meth}_heatmap.png"
)

MSIGDB_NAMES = [
    db["category"]
    if db["subcategory"] is None
    else (db["category"] + " " + db["subcategory"]).replace(":", " ")
    for db in config["gsea"]["msigdb"]
]
EXPAND_PARAMS["msigdb"] = [
    db["category"].lower()
    if db["subcategory"] is None
    else (db["category"].lower() + "_" + db["subcategory"].lower().replace(":", "_"))
    for db in config["gsea"]["msigdb"]
]

GSEA_RESULTS_DIR = join(RESULTS_DIR, "gsea", "{study}")
GSEA_MSIGDB_RESULTS_FILE = join(
    GSEA_RESULTS_DIR,
    "{study}_{experiment}_{de_meth}_gsea_msigdb_{msigdb}_results.tsv",
)
GSEA_MSIGDB_MERGED_RESULTS_FILE = join(
    GSEA_RESULTS_DIR,
    "{study}_{experiment}_{de_meth}_gsea_msigdb_results.xlsx",
)

GENCODE_LOG_DIR = join(LOG_DIR, "gencode")
FASTP_LOG_DIR = join(LOG_DIR, "fastp", "{sub_dir}")
READ_LENGTH_LOG_DIR = join(LOG_DIR, "read_length", "{sub_dir}")
STAR_LOG_DIR = join(LOG_DIR, "star")
STAR_INDEX_LOG_DIR = join(STAR_LOG_DIR, "index")
STAR_ALIGN_LOG_DIR = join(STAR_LOG_DIR, "align", "{sub_dir}")
RSEQC_LOG_DIR = join(LOG_DIR, "rseqc")
RSEQC_OUTPUT_LOG_DIR = join(RSEQC_LOG_DIR, "{sub_dir}")
DATA_MATRIX_LOG_DIR = join(LOG_DIR, "data_matrix", "{study}")
DIFFEXP_LOG_DIR = join(LOG_DIR, "diffexp", "{study}")
GSEA_LOG_DIR = join(LOG_DIR, "gsea", "{study}")

GENCODE_GENE_ANNOT_LOG = join(GENCODE_LOG_DIR, f"{GENCODE_GENOME_NAME}_gene_annot.log")

FASTP_LOG = join(FASTP_LOG_DIR, f"{RUN_ID_WILDCARD_STR}.log")

READ_LENGTH_HISTOGRAM_LOG = join(
    READ_LENGTH_LOG_DIR, f"{RUN_ID_WILDCARD_STR}_histogram.log"
)
READ_LENGTH_LOG = join(READ_LENGTH_LOG_DIR, f"{RUN_ID_WILDCARD_STR}_length.log")

STAR_INDEX_LOG = join(STAR_INDEX_LOG_DIR, f"{GENCODE_GENOME_NAME}_star_index.log")
STAR_ALIGN_PASS1_SJ_FILTERED_LOG = join(
    STAR_ALIGN_LOG_DIR, f"{RUN_ID_WILDCARD_STR}_star_filter_pass1_sj.log"
)
STAR_ALIGN_PASS1_LOG = join(STAR_ALIGN_LOG_DIR, f"{RUN_ID_WILDCARD_STR}_star_pass1.log")
STAR_ALIGN_PASS2_LOG = join(STAR_ALIGN_LOG_DIR, f"{RUN_ID_WILDCARD_STR}_star_pass2.log")

RSEQC_ANNOT_LOG = join(RSEQC_LOG_DIR, "gtf2bed.log")
RSEQC_INFER_EXPERIMENT_LOG = join(
    RSEQC_OUTPUT_LOG_DIR, f"{RUN_ID_WILDCARD_STR}_infer_experiment.log"
)

COUNT_MATRIX_LOG = join(DATA_MATRIX_LOG_DIR, "{study}_count_matrix.log")
COUNT_ESET_LOG = join(DATA_MATRIX_LOG_DIR, "{study}_count_eset.log")

NORM_ESET_LOG = join(DIFFEXP_LOG_DIR, "{study}_{experiment}_{de_meth}_eset.log")
DIFFEXP_QC_LOG_FILE = join(
    DIFFEXP_LOG_DIR, "{study}_{experiment}_{de_qc_meth}_{de_qc_type}_qc.log"
)
DIFFEXP_RESULTS_LOG_FILE = join(
    DIFFEXP_LOG_DIR, "{study}_{experiment}_{de_meth}_results.log"
)
DIFFEXP_VOLCANO_LOG_FILE = join(
    DIFFEXP_LOG_DIR, "{study}_{experiment}_{de_meth}_volcano.log"
)
DIFFEXP_HEATMAP_LOG_FILE = join(
    DIFFEXP_LOG_DIR, "{study}_{experiment}_{de_meth}_heatmap.log"
)
GSEA_MSIGDB_LOG_FILE = join(
    GSEA_LOG_DIR,
    "{study}_{experiment}_{de_meth}_gsea_msigdb_{msigdb}_results.log",
)
GSEA_MSIGDB_MERGED_LOG_FILE = join(
    GSEA_LOG_DIR,
    "{study}_{experiment}_{de_meth}_gsea_msigdb_results.log",
)

GENCODE_GENOME_SEQ_WRAPPER = join(
    config["wrapper"]["base_url"], "bio/reference/gencode/sequence"
)
GENCODE_GENOME_ANNOT_WRAPPER = join(
    config["wrapper"]["base_url"], "bio/reference/gencode/annotation"
)
GENCODE_GENE_ANNOT_WRAPPER = join(
    config["wrapper"]["base_url"], "bio/reference/gtf/gene_annot"
)
FASTP_WRAPPER = join(config["wrapper"]["base_url"], "bio/fastp")
READ_LENGTH_WRAPPER = join(config["wrapper"]["base_url"], "bio/bbmap/readlength")
STAR_INDEX_WRAPPER = join(config["wrapper"]["base_url"], "bio/star/index")
STAR_ALIGN_WRAPPER = join(config["wrapper"]["base_url"], "bio/star/align")
RSEQC_ANNOT_WRAPPER = join(config["wrapper"]["base_url"], "bio/gffutils/gtf2bed")
RSEQC_INFER_EXPERIMENT_WRAPPER = join(
    config["wrapper"]["base_url"], "bio/rseqc/infer_experiment"
)
COUNT_MATRIX_WRAPPER = join(config["wrapper"]["base_url"], "bio/star/count_matrix")
COUNT_ESET_WRAPPER = join(config["wrapper"]["base_url"], "bio/biobase/eset")

STAR_INDEX_THREADS = (
    workflow.cores
    if config["star"]["index"]["threads"] == "all"
    else config["star"]["index"]["threads"]
)
STAR_ALIGN_THREADS = (
    workflow.cores
    if config["star"]["align"]["threads"] == "all"
    else config["star"]["align"]["threads"]
)


include: join(RULES_DIR, "common.smk")
include: join(RULES_DIR, "genome.smk")
include: join(RULES_DIR, "gene_annot.smk")
include: join(RULES_DIR, "trim.smk")
include: join(RULES_DIR, "read_length.smk")
include: join(RULES_DIR, "align.smk")
include: join(RULES_DIR, "strand_info.smk")
include: join(RULES_DIR, "data_matrix.smk")
include: join(RULES_DIR, "diffexp.smk")
include: join(RULES_DIR, "gsea.smk")


wildcard_constraints:
    **{w: "|".join(set([re.escape(v) for v in l])) for w, l in EXPAND_PARAMS.items()},


rule all:
    input:
        # GENCODE_GENOME_SEQ_FILE,
        # GENCODE_GENOME_ANNOT_FILE,
        # GENCODE_GENE_ANNOT_FILE,
        # RSEQC_GENOME_ANNOT_FILE,
        # STAR_INDEX_DIR,
        # expand(TRIMMED_FASTQ1_FILE, zip, **EXPAND_PARAMS),
        # expand(TRIMMED_FASTQ2_FILE, zip, **EXPAND_PARAMS),
        # expand(READ_LENGTH_HISTOGRAM_FILE, zip, **EXPAND_PARAMS),
        # expand(READ_LENGTH_FILE, zip, **EXPAND_PARAMS),
        # expand(STAR_ALIGN_PASS1_SJ_FILE, zip, **EXPAND_PARAMS),
        # expand(STAR_ALIGN_PASS1_SJ_FILTERED_FILE, zip, **EXPAND_PARAMS),
        # expand(STAR_BAM_FILE, zip, **EXPAND_PARAMS),
        # expand(STAR_READ_COUNT_FILE, zip, **EXPAND_PARAMS),
        # expand(RSEQC_INFER_EXPERIMENT_FILE, zip, **EXPAND_PARAMS),
        # expand(RSEQC_STRAND_INFO_FILE, zip, **EXPAND_PARAMS),
        # expand(COUNT_MATRIX_FILE, zip, **EXPAND_PARAMS),
        # expand(COUNT_ESET_FILE, zip, **EXPAND_PARAMS),
        # expand(NORM_ESET_FILE, **EXPAND_PARAMS),
        expand(DIFFEXP_QC_PLOT_FILE, **EXPAND_PARAMS),
        expand(DIFFEXP_RESULTS_TABLE_FILE, **EXPAND_PARAMS),
        expand(DIFFEXP_VOLCANO_PLOT_FILE, **EXPAND_PARAMS),
        expand(DIFFEXP_HEATMAP_PLOT_FILE, **EXPAND_PARAMS),
        expand(GSEA_MSIGDB_RESULTS_FILE, **EXPAND_PARAMS),
        expand(GSEA_MSIGDB_MERGED_RESULTS_FILE, **EXPAND_PARAMS),


def clean(*dirs):
    for clean_dir in dirs:
        if exists(clean_dir):
            rmtree(clean_dir)
        for dirpath, dirnames, filenames in sorted(walk(getcwd())):
            for name in dirnames:
                if name == "__pycache__":
                    pycache_dir = join(dirpath, name)
                    if exists(pycache_dir):
                        rmtree(pycache_dir)


rule clean:
    run:
        clean(RESULTS_DIR, LOG_DIR)


rule clean_all:
    run:
        clean(RESOURCES_DIR, RESULTS_DIR, LOG_DIR)
